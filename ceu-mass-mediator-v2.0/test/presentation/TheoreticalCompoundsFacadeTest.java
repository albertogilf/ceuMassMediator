/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import facades.TheoreticalCompoundsFacade;
import java.util.LinkedList;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author alberto
 */
public class TheoreticalCompoundsFacadeTest {

    private static String PATHNAMEFORTESTINGFA = "test/filesForTesting/FA.csv";
    
    private TheoreticalCompoundsFacade tcf;
    
    @Before
    public void setUp() {
        tcf = new TheoreticalCompoundsFacade();
        // TODO
    }

    @Test
    public void testfindFattyAcids() {
        List list;
        list = new LinkedList<>();

        assertEquals(0, list.size());
        
        //Mockito.verify(tcf.em).createNamedQuery("Task.findAll", Task.class);
    }
    
    
// TESTING  CREATIN AN ENTITY MANAGER FACTORY
/*
    
    public TheoreticalCompoundsFacadeTest() {
    }

    private static EntityManagerFactory factory;

    @Test
    @SuppressWarnings("unchecked")
    public void testJPA() {
        EntityManager em = factory.createEntityManager();

        Query query = em.createQuery("SELECT compound FROM NewCompounds c");
        List<NewCompounds> allUsers = query.getResultList();
        em.close();

        assertFalse(allUsers.isEmpty());
    }

    @BeforeClass
    public static void createFactory() {
        factory = Persistence.createEntityManagerFactory("ceuMassMediator");
    }

    @AfterClass
    public static void closeFactory() {
        factory.close();
    }
    
    */
    
    
// AUTOMATIC CODE GENERATED BY JUNIT
    
    
    /*

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of findCompoundsSimple method, of class TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindCompoundsSimple() throws Exception {
        System.out.println("findCompoundsSimple");
        List<Double> masses = null;
        String toleranceMode = "";
        Double tolerance = null;
        String ionMode = "";
        String massesMode = "";
        List<String> adducts = null;
        List<TheoreticalCompoundsGroup> listCompoundsGroup = null;
        List<String> databases = null;
        String metabolitesType = "";
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalCompounds> expResult = null;
        List<TheoreticalCompounds> result = instance.findCompoundsSimple(masses, toleranceMode, tolerance, ionMode, massesMode, adducts, listCompoundsGroup, databases, metabolitesType);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findRangeSimple method, of class TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindRangeSimple() throws Exception {
        System.out.println("findRangeSimple");
        List<Double> masses = null;
        String toleranceMode = "";
        Double tolerance = null;
        String ionMode = "";
        String massesMode = "";
        List<String> adducts = null;
        List<TheoreticalCompoundsGroup> listCompoundsGroup = null;
        List<String> databases = null;
        String metabolitesType = "";
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalCompounds> expResult = null;
        List<TheoreticalCompounds> result = instance.findRangeSimple(masses, toleranceMode, tolerance, ionMode, massesMode, adducts, listCompoundsGroup, databases, metabolitesType);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findRangeGeneratedSimple method, of class
     * TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindRangeGeneratedSimple() throws Exception {
        System.out.println("findRangeGeneratedSimple");
        List<Double> masses = null;
        String toleranceMode = "";
        Double tolerance = null;
        String ionMode = "";
        String massesMode = "";
        List<String> adducts = null;
        List<TheoreticalCompoundsGroup> listCompoundsGroup = null;
        List<String> databases = null;
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalCompounds> expResult = null;
        List<TheoreticalCompounds> result = instance.findRangeGeneratedSimple(masses, toleranceMode, tolerance, ionMode, massesMode, adducts, listCompoundsGroup, databases);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findCompoundsAdvanced method, of class
     * TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindCompoundsAdvanced() throws Exception {
        System.out.println("findCompoundsAdvanced");
        List<Double> masses = null;
        List<Double> retentionTimes = null;
        List<Map<Double, Integer>> compositeSpectrum = null;
        List<Boolean> isSignificativeCompound = null;
        String toleranceMode = "";
        Double tolerance = null;
        String chemAlphabet = "";
        String ionMode = "";
        String massesMode = "";
        List<String> adducts = null;
        List<TheoreticalCompoundsGroup> listCompoundsGroup = null;
        List<String> databases = null;
        String metabolitesType = "";
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalCompounds> expResult = null;
        List<TheoreticalCompounds> result = instance.findCompoundsAdvanced(masses, retentionTimes, compositeSpectrum, isSignificativeCompound, toleranceMode, tolerance, chemAlphabet, ionMode, massesMode, adducts, listCompoundsGroup, databases, metabolitesType);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findRangeAdvanced method, of class TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindRangeAdvanced() throws Exception {
        System.out.println("findRangeAdvanced");
        List<Double> masses = null;
        List<Double> retentionTimes = null;
        List<Map<Double, Integer>> compositeSpectrum = null;
        List<Boolean> isSignificativeCompound = null;
        String toleranceMode = "";
        Double tolerance = null;
        String chemAlphabet = "";
        String ionMode = "";
        String massesMode = "";
        List<String> adducts = null;
        List<TheoreticalCompoundsGroup> listCompoundsGroup = null;
        List<String> databases = null;
        String metabolitesType = "";
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalCompounds> expResult = null;
        List<TheoreticalCompounds> result = instance.findRangeAdvanced(masses, retentionTimes, compositeSpectrum, isSignificativeCompound, toleranceMode, tolerance, chemAlphabet, ionMode, massesMode, adducts, listCompoundsGroup, databases, metabolitesType);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findRangeGeneratedAdvanced method, of class
     * TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindRangeGeneratedAdvanced() throws Exception {
        System.out.println("findRangeGeneratedAdvanced");
        List<Double> masses = null;
        List<Double> retentionTimes = null;
        List<Map<Double, Integer>> compositeSpectrum = null;
        List<Boolean> isSignificativeCompound = null;
        String toleranceMode = "";
        Double tolerance = null;
        String chemAlphabet = "";
        String ionMode = "";
        String massesMode = "";
        List<String> adducts = null;
        List<TheoreticalCompoundsGroup> listCompoundsGroup = null;
        List<String> databases = null;
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalCompounds> expResult = null;
        List<TheoreticalCompounds> result = instance.findRangeGeneratedAdvanced(masses, retentionTimes, compositeSpectrum, isSignificativeCompound, toleranceMode, tolerance, chemAlphabet, ionMode, massesMode, adducts, listCompoundsGroup, databases);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of testDetectAdductBasedOnCompositeSpectrum method, of class
     * TheoreticalCompoundsFacade.
     *
    @Test
    public void testTestDetectAdductBasedOnCompositeSpectrum() throws Exception {
        System.out.println("testDetectAdductBasedOnCompositeSpectrum");
        String massesMode = "";
        String ionMode = "";
        double inputMass = 0.0;
        List<String> adducts = null;
        Map<Double, Integer> compositeSpectrum = null;
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        String expResult = "";
        String result = instance.testDetectAdductBasedOnCompositeSpectrum(massesMode, ionMode, inputMass, adducts, compositeSpectrum);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findCompoundsBrowseSearch method, of class
     * TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindCompoundsBrowseSearch() throws Exception {
        System.out.println("findCompoundsBrowseSearch");
        String name = "";
        String formula = "";
        boolean exactName = false;
        List<TheoreticalCompoundsGroup> listCompoundsGroup = null;
        List<String> databases = null;
        String metabolitesType = "";
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalCompounds> expResult = null;
        List<TheoreticalCompounds> result = instance.findCompoundsBrowseSearch(name, formula, exactName, listCompoundsGroup, databases, metabolitesType);
        assertEquals(expResult, result);
        container.close();
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findLCOxidizedFA method, of class TheoreticalCompoundsFacade.
     *
    @Test
    public void testFindFattyAcids() throws Exception {
        System.out.println("findLCOxidizedFA");
        Double querymzParentIonMass = 0d;
        List<Double> querymzFattyAcidMasses;
        querymzFattyAcidMasses = readDoublesFromFile(PATHNAMEFORTESTINGFA);
        String toleranceModeForFA = "mDa";
        Double toleranceForFA = 10d;
        String toleranceModeForPI = "mDa";
        Double toleranceForPI = 10d;
        String ionMode = "negative";
        List<String> databases = null;
        List<String> possibleOxidations = new LinkedList<String>();
        possibleOxidations.add("allOxidations");
        List<TheoreticalCompoundsGroup> listOxidizedCompoundsGrouped;
        listOxidizedCompoundsGrouped = new LinkedList<TheoreticalCompoundsGroup>();
        List<TheoreticalFAOxidizedCompound> result;
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalFAOxidizedCompound> expResult = null;
        result = instance.findLCOxidizedFA(querymzParentIonMass,
                querymzFattyAcidMasses,
                toleranceModeForFA,
                toleranceForFA,
                toleranceModeForPI,
                toleranceForPI,
                ionMode,
                databases,
                possibleOxidations,
                listOxidizedCompoundsGrouped);
        assertEquals(expResult, result);
        container.close();
        
        /*
        EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer();
        TheoreticalCompoundsFacade instance = (TheoreticalCompoundsFacade) container.getContext().lookup("java:global/classes/TheoreticalCompoundsFacade");
        List<TheoreticalFAOxidizedCompound> expResult = null;
        List<TheoreticalFAOxidizedCompound> result = instance.findLCOxidizedFA(querymzParentIonMass, querymzFattyAcidMasses, toleranceModeForFA, toleranceForFA, toleranceModeForPI, toleranceForPI, ionMode, databases, possibleOxidations, listOxidizedCompoundsGrouped);
        assertEquals(expResult, result);
        container.close();
         *
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    private static List<Double> readDoublesFromFile(String PATH) {
        List<Double> listDoubles = new LinkedList<Double>();

        Scanner scan;
        File file = new File(PATH);
        try {
            scan = new Scanner(file);

            while (scan.hasNextDouble()) {
                Double number = scan.nextDouble();
                //System.out.println(number);
                listDoubles.add(number);
            }
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
        return listDoubles;
    }
     */
}
